apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: te
  labels:
    app: nuodb
    group: nuodb
    deploymentconfig: te
spec:
  replicas: {{ .Values.teCount }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: te
        deploymentconfig: te
        database: {{ .Values.dbName }}
        nodetype: te
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - { key: "nuodb.com/zone",      operator: Exists }
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: database
                  operator: In
                  values:
                  - {{ .Values.dbName | quote }}
              topologyKey: kubernetes.io/hostname
      containers:
      -
        name: te
        image: {{ .Values.container }}
        imagePullPolicy: IfNotPresent
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - { name: DB_NAME,             value: {{ .Values.dbName | quote }} }
        - { name: NUOCMD_API_SERVER,   value: "admin.$(NAMESPACE).svc:8888"}
        - { name: NUODB_OPTIONS,       value: "mem {{ .Values.teMemory }}g {{ .Values.engineOptions }}" }
        args: [ "nuote", "--servers-ready-timeout", "300", "--database-created-timeout", "300" ]
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
          requests:
            memory: "{{ .Values.teMemory }}Gi"
            cpu: {{ .Values.teCpu | quote }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: logdir
          mountPath: /var/log/nuodb
      volumes:
        - name: logdir
          emptyDir: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 15
